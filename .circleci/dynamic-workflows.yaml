version: 2.1

orbs:
  aws-eks: circleci/aws-eks@2.2.0
  aws-cli: circleci/aws-cli@3.1.1
  slack: circleci/slack@4.10.1

parameters:
  workspace_directory:
    type: string
    default: "/home/circleci/app"
  dev-changed:
    type: boolean
    default: false
  sta-changed:
    type: boolean
    default: false
  pro-changed:
    type: boolean
    default: false
  api-changed:
    type: boolean
    default: false

executors:
  spectral-executor:
    docker:
      - image: bitnami/git:latest
    working_directory: << pipeline.parameters.workspace_directory >>

jobs:
  api-spec-lint:
    executor: spectral-executor
    steps:
      - checkout
      - run:
          name: "Checkout Monaco Spectral Ruleset"
          command: git clone "git@github.com:monacohq/api-standards-linter.git" --branch "main" ./spectral
      - run: "[ -d lint-results ] || mkdir lint-results"
      - run:
          name: "Install Spectral"
          command: curl -L https://raw.github.com/stoplightio/spectral/master/scripts/install.sh | sh
      - run:
          name: "Run Spectral Lint"
          command: /usr/local/bin/spectral lint -r ./spectral/monaco.yml -o lint-results/golang-reference-api.xml -f junit internal/docs/swagger.json
      - store_test_results:
          path: lint-results

  deploy-api-kustomize:
    docker:
      - image: cimg/base:stable
    parameters:
      kustomize-folder:
        description: kustomize folder to deploy, for example adev-app-main
        type: string
      kubectl-version:
        type: string
        description: kubectl version
        default: "latest"
    steps:
      - checkout
      - aws-cli/install 
      - run:
          name: "Authenticate and get AWS env"
          command: |
            read -r AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN \<<< \
              $(aws sts assume-role-with-web-identity \
               --role-arn ${AWS_ROLE_ARN} \
               --role-session-name "CircleCI-${CIRCLE_WORKFLOW_ID}" \
               --web-identity-token $CIRCLE_OIDC_TOKEN \
               --duration-seconds 3600 \
               --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
               --output text)
            export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
            aws sts get-caller-identity
            echo "export AWS_ACCESS_KEY_ID=\"$AWS_ACCESS_KEY_ID\"" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=\"$AWS_SECRET_ACCESS_KEY\"" >> $BASH_ENV
            echo "export AWS_SESSION_TOKEN=\"$AWS_SESSION_TOKEN\"" >> $BASH_ENV
      - aws-eks/update-kubeconfig-with-authenticator:
          aws-region: ${AWS_REGION}
          cluster-name: ${EKS_CLUSTER_NAME}
          install-kubectl: true
          kubectl-version: << parameters.kubectl-version >>
      - run:
          name: Apply kustomization
          command: |
            kubectl kustomize deploy/<< parameters.kustomize-folder >> | kubectl -n $EKS_NAMESPACE apply -f -

# Note: slack integration requires SLACK_ACCESS_TOKEN (has to be stored in circleci context) and SLACK_DEFAULT_CHANNEL (can be stored as either context or env variable)
  send-slack-changelog:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Get tag version of the image
          command: |
            echo 'TAG_VERSION="$(grep -o 'v...............' deploy/apro-app-main/kustomization.yaml)"' >> $BASH_ENV
      - slack/notify:
          event: always
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "CHANGELOG - :book:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Click the button to view changelog - tag version: ${TAG_VERSION}. 
                    Note: This is a sample production pipeline for golang-reference-api app. 
                    Hence, approving the workflow will not deploy anything in production."
                  },
                  "accessory": {
                    "type": "button",
                    "text": {
                      "type": "plain_text",
                      "text": "View Changelog",
                      "emoji": true
                    },
                    "value": "click_me_123",
                    "url": "https://github.com/monacohq/crypto-pnl/blob/${TAG_VERSION}/CHANGELOG.md",
                    "action_id": "button-action"
                  }
                }
              ]
            }

workflows:
  api-spec-lint:
    when: << pipeline.parameters.api-changed >>
    jobs:
      - api-spec-lint

  deploy-api-dev:
    when: << pipeline.parameters.dev-changed >>
    jobs:
      - deploy-api-kustomize:
          context: golang-reference-api-dev
          kustomize-folder: adev-app-main
          filters:
            tags:
              only: /.*/

  deploy-api-staging:
    when: << pipeline.parameters.sta-changed >>
    jobs:
      - deploy-api-kustomize:
          context: golang-reference-api-staging
          kustomize-folder: asta-app-main
          filters:
            branches:
              only:
                - main
            tags:
              only: /.*/

  deploy-production:
    when: << pipeline.parameters.pro-changed >>
    jobs:
      - slack/on-hold:
          context: golang-reference-api-prod
          mentions: "@channel"
          filters:
            branches:
              only:
                - main
            tags:
              only: /.*/
      - send-slack-changelog:
          context: golang-reference-api-prod
          requires:
            - slack/on-hold
          filters:
            branches:
              only:
                - main
            tags:
              only: /.*/
      - pause_workflow:
          type: approval
          requires:
            - slack/on-hold
          filters:
            branches:
              only:
                - main
            tags:
              only: /.*/
      # Note: this app will not be deployed in production, hence the following code snippet is commented out and only for reference
      # - deploy-api-kustomize:
      #     context: golang-reference-api-prod
      #     requires:
      #       - pause_workflow
      #     kustomize-folder: apro-app-main
      #     filters:
      #       branches:
      #         only:
      #           - main
      #       tags:
      #         only: /.*/
