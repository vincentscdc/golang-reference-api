// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: creditline/v1/creditline.proto

package creditline

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PayLaterServiceClient is the client API for PayLaterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PayLaterServiceClient interface {
	GetCreditLine(ctx context.Context, in *GetCreditLineRequest, opts ...grpc.CallOption) (*GetCreditLineResponse, error)
}

type payLaterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPayLaterServiceClient(cc grpc.ClientConnInterface) PayLaterServiceClient {
	return &payLaterServiceClient{cc}
}

func (c *payLaterServiceClient) GetCreditLine(ctx context.Context, in *GetCreditLineRequest, opts ...grpc.CallOption) (*GetCreditLineResponse, error) {
	out := new(GetCreditLineResponse)
	err := c.cc.Invoke(ctx, "/creditline.v1.PayLaterService/GetCreditLine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PayLaterServiceServer is the server API for PayLaterService service.
// All implementations must embed UnimplementedPayLaterServiceServer
// for forward compatibility
type PayLaterServiceServer interface {
	GetCreditLine(context.Context, *GetCreditLineRequest) (*GetCreditLineResponse, error)
	mustEmbedUnimplementedPayLaterServiceServer()
}

// UnimplementedPayLaterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPayLaterServiceServer struct {
}

func (UnimplementedPayLaterServiceServer) GetCreditLine(context.Context, *GetCreditLineRequest) (*GetCreditLineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCreditLine not implemented")
}
func (UnimplementedPayLaterServiceServer) mustEmbedUnimplementedPayLaterServiceServer() {}

// UnsafePayLaterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PayLaterServiceServer will
// result in compilation errors.
type UnsafePayLaterServiceServer interface {
	mustEmbedUnimplementedPayLaterServiceServer()
}

func RegisterPayLaterServiceServer(s grpc.ServiceRegistrar, srv PayLaterServiceServer) {
	s.RegisterService(&PayLaterService_ServiceDesc, srv)
}

func _PayLaterService_GetCreditLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCreditLineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PayLaterServiceServer).GetCreditLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/creditline.v1.PayLaterService/GetCreditLine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PayLaterServiceServer).GetCreditLine(ctx, req.(*GetCreditLineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PayLaterService_ServiceDesc is the grpc.ServiceDesc for PayLaterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PayLaterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "creditline.v1.PayLaterService",
	HandlerType: (*PayLaterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCreditLine",
			Handler:    _PayLaterService_GetCreditLine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "creditline/v1/creditline.proto",
}
