// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package servicemock is a generated GoMock package.
package servicemock

import (
	context "context"
	service "golangreferenceapi/internal/payments/service"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockPaymentPlanService is a mock of PaymentPlanService interface.
type MockPaymentPlanService struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentPlanServiceMockRecorder
}

// MockPaymentPlanServiceMockRecorder is the mock recorder for MockPaymentPlanService.
type MockPaymentPlanServiceMockRecorder struct {
	mock *MockPaymentPlanService
}

// NewMockPaymentPlanService creates a new mock instance.
func NewMockPaymentPlanService(ctrl *gomock.Controller) *MockPaymentPlanService {
	mock := &MockPaymentPlanService{ctrl: ctrl}
	mock.recorder = &MockPaymentPlanServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentPlanService) EXPECT() *MockPaymentPlanServiceMockRecorder {
	return m.recorder
}

// CompletePaymentPlanCreation mocks base method.
func (m *MockPaymentPlanService) CompletePaymentPlanCreation(ctx context.Context, userID, paymentPlanID uuid.UUID) (*service.PaymentPlans, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompletePaymentPlanCreation", ctx, userID, paymentPlanID)
	ret0, _ := ret[0].(*service.PaymentPlans)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompletePaymentPlanCreation indicates an expected call of CompletePaymentPlanCreation.
func (mr *MockPaymentPlanServiceMockRecorder) CompletePaymentPlanCreation(ctx, userID, paymentPlanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompletePaymentPlanCreation", reflect.TypeOf((*MockPaymentPlanService)(nil).CompletePaymentPlanCreation), ctx, userID, paymentPlanID)
}

// CreatePendingPaymentPlan mocks base method.
func (m *MockPaymentPlanService) CreatePendingPaymentPlan(ctx context.Context, userID uuid.UUID, paymentPlan *service.CreatePaymentPlanParams) (*service.PaymentPlans, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePendingPaymentPlan", ctx, userID, paymentPlan)
	ret0, _ := ret[0].(*service.PaymentPlans)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePendingPaymentPlan indicates an expected call of CreatePendingPaymentPlan.
func (mr *MockPaymentPlanServiceMockRecorder) CreatePendingPaymentPlan(ctx, userID, paymentPlan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePendingPaymentPlan", reflect.TypeOf((*MockPaymentPlanService)(nil).CreatePendingPaymentPlan), ctx, userID, paymentPlan)
}

// GetPaymentPlanByUserID mocks base method.
func (m *MockPaymentPlanService) GetPaymentPlanByUserID(ctx context.Context, userID uuid.UUID) ([]service.PaymentPlans, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentPlanByUserID", ctx, userID)
	ret0, _ := ret[0].([]service.PaymentPlans)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentPlanByUserID indicates an expected call of GetPaymentPlanByUserID.
func (mr *MockPaymentPlanServiceMockRecorder) GetPaymentPlanByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentPlanByUserID", reflect.TypeOf((*MockPaymentPlanService)(nil).GetPaymentPlanByUserID), ctx, userID)
}
