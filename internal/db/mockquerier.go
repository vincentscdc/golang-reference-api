// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/db/querier.go

// Package db is a generated GoMock package.
package db

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CreatePaymentInstallments mocks base method.
func (m *MockQuerier) CreatePaymentInstallments(ctx context.Context, arg *CreatePaymentInstallmentsParams) (*CreatePaymentInstallmentsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentInstallments", ctx, arg)
	ret0, _ := ret[0].(*CreatePaymentInstallmentsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaymentInstallments indicates an expected call of CreatePaymentInstallments.
func (mr *MockQuerierMockRecorder) CreatePaymentInstallments(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentInstallments", reflect.TypeOf((*MockQuerier)(nil).CreatePaymentInstallments), ctx, arg)
}

// CreatePaymentPlan mocks base method.
func (m *MockQuerier) CreatePaymentPlan(ctx context.Context, arg *CreatePaymentPlanParams) (*CreatePaymentPlanRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePaymentPlan", ctx, arg)
	ret0, _ := ret[0].(*CreatePaymentPlanRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePaymentPlan indicates an expected call of CreatePaymentPlan.
func (mr *MockQuerierMockRecorder) CreatePaymentPlan(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePaymentPlan", reflect.TypeOf((*MockQuerier)(nil).CreatePaymentPlan), ctx, arg)
}

// ListPaymentInstallmentsByPlanID mocks base method.
func (m *MockQuerier) ListPaymentInstallmentsByPlanID(ctx context.Context, paymentPlanID uuid.UUID) ([]*ListPaymentInstallmentsByPlanIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaymentInstallmentsByPlanID", ctx, paymentPlanID)
	ret0, _ := ret[0].([]*ListPaymentInstallmentsByPlanIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPaymentInstallmentsByPlanID indicates an expected call of ListPaymentInstallmentsByPlanID.
func (mr *MockQuerierMockRecorder) ListPaymentInstallmentsByPlanID(ctx, paymentPlanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaymentInstallmentsByPlanID", reflect.TypeOf((*MockQuerier)(nil).ListPaymentInstallmentsByPlanID), ctx, paymentPlanID)
}

// ListPaymentPlansByUserID mocks base method.
func (m *MockQuerier) ListPaymentPlansByUserID(ctx context.Context, userID uuid.UUID) ([]*ListPaymentPlansByUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPaymentPlansByUserID", ctx, userID)
	ret0, _ := ret[0].([]*ListPaymentPlansByUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPaymentPlansByUserID indicates an expected call of ListPaymentPlansByUserID.
func (mr *MockQuerierMockRecorder) ListPaymentPlansByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPaymentPlansByUserID", reflect.TypeOf((*MockQuerier)(nil).ListPaymentPlansByUserID), ctx, userID)
}
